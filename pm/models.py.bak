from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.conf import settings


class Custom(models.Model):
    class Meta:
        verbose_name = _("Custom")
        verbose_name_plural = _("Custom")
    custom_name = models.CharField("custom_name", max_length=200, verbose_name=_('客户名称'))
    custom_dept = models.CharField(_("custom_dept"), max_length=200, verbose_name=_('客户单位'))

class Project(models.Model):
    class Meta:
        verbose_name = _("Project")
        verbose_name_plural = _("Project")

    Platform = (
    ('pb', _('Pacbio')),
    ('ont', _('Nanopore')),
    ('bionano', _('Bionano')),
   ('ngs', _('NGS'))
)
    Analysis_Type = (
        ('met', _('甲基化')),
        ('sv', _('结构变异')),
        ('str', _('串联重复')),
        ('tumor', _('肿瘤')),
        ('haplotype', _('单体型'))
    )

   
    STATUSES = (
        ('to-do', _('To Do')),
        ('in_progress', _('In Progress')),
        ('blocked', _('Blocked')),
        ('done', _('Done')),
        ('dismissed', _('Dismissed'))
    )

    PRIORITIES = (
        ('00_low', _('Low')),
        ('10_normal', _('Normal')),
        ('20_high', _('High')),
        ('30_critical', _('Critical')),
        ('40_blocker', _('Blocker'))
    )

    proj_id = models.CharField(_("proj_id"), max_length=200)
    proj_name = models.CharField(_("proj_name"), max_length=200, verbose_name=_('合同编号'))
    custom = models.ForeignKey(Custom, related_name='+', on_delete=models.SET_NULL, null=False, blank=False, 
        verbose_name=_('客户名称'))
    platform = models.CharField(_("platform"), max_length=20, choices=Platform, default='ont')
    analysis_type = models.CharField(_("analysis_type"), max_length=20, choices=Analysis_Type, default='sv')
    start = models.DateField(_("start"), null=True, blank=True)
    deadline = models.DateField(_("deadline"), null=True, blank=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='project_assigned', verbose_name=_('销售'),
                                   on_delete=models.SET_NULL, null=True, blank=True)
    state = models.CharField(_("state"), max_length=20, choices=STATUSES, default='to-do')
    priority = models.CharField(_("priority"), max_length=20, choices=PRIORITIES, default='10_normal')
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='tasks_created', verbose_name=_('created by'),
                                   on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(_("created at"), auto_now_add=True, editable=False)
    last_modified = models.DateTimeField(_("last modified"), auto_now=True, editable=False)

    description = models.TextField(_("description"), max_length=2000, null=True, blank=True)
    
    def __str__(self):
        return "[%s] %s" % (self.id, self.title)



class Sample(models.Model):
    class Meta:
        verbose_name = _("Sample")
        verbose_name_plural = _("Sample")

    STATUSES = (
        ('to-do', _('To Do')),
        ('in_progress', _('In Progress')),
        ('blocked', _('Blocked')),
        ('done', _('Done')),
        ('dismissed', _('Dismissed'))
    )

    PRIORITIES = (
        ('00_low', _('Low')),
        ('10_normal', _('Normal')),
        ('20_high', _('High')),
        ('30_critical', _('Critical')),
        ('40_blocker', _('Blocker'))
    )


    sample_id = models.CharField(_("sample_id"), max_length=200, verbose_name=_('样本编号'))
    sample_name = models.CharField(_("sample_name"), max_length=200, verbose_name=_('样本名称'))
    platform = models.CharField(_("platform"), max_length=20, choices=Platform, default='ont')
    analysis_type = models.CharField(_("analysis_type"), max_length=20, choices=Analysis_Type, default='sv')
    start = models.DateField(_("start"), null=True, blank=True)
    deadline = models.DateField(_("deadline"), null=True, blank=True)
    priority = models.CharField(_("priority"), max_length=20, choices=PRIORITIES, default='10_normal')
    created_at = models.DateTimeField(_("created at"), auto_now_add=True, editable=False)
    last_modified = models.DateTimeField(_("last modified"), auto_now=True, editable=False) 
    state = models.CharField(_("state"), max_length=20, choices=STATUSES, default='to-do')
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='sample_created', verbose_name=_('created by'),
                                   on_delete=models.SET_NULL, null=True)


class Sequence(models.Model):
    class Meta:
        verbose_name = _("Sample")
        verbose_name_plural = _("Sample")
    Sample_Type = (
    ('dna', _('DNA')),
    ('rna', _('RNA'))
)
    Machine_ID = (
    ('G01', _('GridION_1')),
    ('G02', _('GridION_2')),
    ('G03', _('GridION_3')),
    ('G04', _('GridION_4')),
    ('P01', _('PromethION_1'))
)
    jianku_date = models.DateTimeField(_("jianku_date"), editable=True, verbose_name=_('建库日期'))
    sample_type = models.CharField(_("sample_type"), max_length=20, choices=Sample_Type, default='dna')
    library_id = models.CharField(_("library_id"), max_length=200, verbose_name=_('文库编号'))
    machine_id = models.CharField(_("machine_id"), max_length=200, verbose_name=_('机器编号'), choices=Machine_ID)
    cell_id = models.CharField(_("cell_id"), max_length=200, verbose_name=_('Cell ID'))
    sequence_time = models.DateTimeField(_("sequence_time"), verbose_name=_('测序时间'))
    yield_data = models.FloatField(_("yield_data"), verbose_name=_('Yield(G)'))
    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='sequence_user', verbose_name=_('测序人员'),
                                   on_delete=models.SET_NULL, null=True, blank=True)


